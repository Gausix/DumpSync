{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>DumpSync is a simple yet powerful tool designed for dumping and restoring MySQL databases. It can be utilized for backup and restore operations or for transferring a database between different servers.</p>"},{"location":"#overview","title":"Overview","text":"<p>DumpSync automates the process of creating dumps of a MySQL database at configurable time intervals. The generated dump files are saved in a user-specified directory, making it easy to manage backups. The tool offers flexibility through configuration options, which can be set via environment variables or command-line arguments, accommodating various usage scenarios.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Automated Dumps: Schedule regular backups of your MySQL database to ensure data safety.</li> <li>Flexible Configuration: Customize settings through environment variables or command-line arguments based on your needs.</li> <li>Simple Restore Process: Easily restore databases from existing dump files with minimal effort.</li> <li>Cross-Server Transfers: Facilitate the migration of databases between different servers seamlessly.</li> </ul>"},{"location":"connection/","title":"Database Connection","text":"<p>To connect to the database, you need to configure the Environment System in your <code>.env</code> file. You should include the following settings:</p> <pre><code>DB_HOST=\"YOUR_HOST\"\nDB_PORT=\"YOUR_PORT\"\nDB_USER=\"YOUR_USERNAME\"\nDB_PASSWORD=\"YOUR_PASSWORD\"\nDB_NAME=\"YOUR_DATABASE\"\n\nDS_DUMP_INTERVAL=\"3600\"  # Interval for the dump process in seconds\nDS_DUMP_PATH=\"/path/to/\"  # Path where dumps will be saved\n\n# OR, alternatively\n\nDS_DB_HOST=\"YOUR_HOST\"\nDS_DB_PORT=\"YOUR_PORT\"\nDS_DB_USER=\"YOUR_USERNAME\"\nDS_DB_PASSWORD=\"YOUR_PASSWORD\"\nDS_DB_NAME=\"YOUR_DATABASE\"\n\nDS_DUMP_INTERVAL=\"3600\"  # Interval for the dump process in seconds\nDS_DUMP_PATH=\"/path/to/\"  # Path where dumps will be saved\n</code></pre>"},{"location":"connection/#configuration-details","title":"Configuration Details","text":"<ul> <li>DB_HOST / DS_DB_HOST: The hostname or IP address of your database server.</li> <li>DB_PORT / DS_DB_PORT: The port number on which your database is listening.</li> <li>DB_USER / DS_DB_USER: Your database username.</li> <li>DB_PASSWORD / DS_DB_PASSWORD: The password associated with the database user.</li> <li>DB_NAME / DS_DB_NAME: The name of the database you want to connect to.</li> <li>DS_DUMP_INTERVAL: The interval (in seconds) for the dump process; defaults to 3600 seconds (1 hour).</li> <li>DS_DUMP_PATH: The directory path where the database dumps will be saved.</li> </ul> <p>You can choose to use either the <code>DB_</code> prefixed variables or the <code>DS_</code> prefixed variables for your configuration. Make sure to adjust the values accordingly to fit your environment.</p>"},{"location":"export/","title":"DumpSync Command: Export","text":"<p>To create a database dump, you can use the following command:</p> <pre><code>dumpsync export -d my_database -i 3600 -f /path/to/\n</code></pre>"},{"location":"export/#command-breakdown","title":"Command Breakdown","text":"<ul> <li> <p>dumpsync: This is the main command to invoke the DumpSync tool.</p> </li> <li> <p>export: This subcommand initiates the export process to create a dump of the specified database.</p> </li> </ul>"},{"location":"export/#options","title":"Options","text":"<ul> <li> <p>-d my_database: Specifies the name of the database you want to export. Replace <code>my_database</code> with the actual name of your database.</p> </li> <li> <p>-i 3600: Sets the interval (in seconds) for the dump process. In this example, the interval is set to 3600 seconds (1 hour). You can adjust this value based on your requirements.</p> </li> <li> <p>-f /path/to/: Indicates the file path where the dump will be saved. Replace <code>/path/to/</code> with the desired directory path on your system.</p> </li> </ul>"},{"location":"export/#example","title":"Example","text":"<p>To create a dump of a database named <code>example_db</code> with an interval of 2 hours and save it to the <code>/backups/</code> directory, you would run:</p> <pre><code>dumpsync export -d example_db -i 7200 -f /backups/\n</code></pre>"},{"location":"export/#notes","title":"Notes","text":"<ul> <li>Ensure that the specified path for the dump exists and that you have the necessary permissions to write to that directory.</li> <li>Adjust the interval according to your backup strategy to ensure that you have up-to-date dumps without overwhelming your database resources.</li> </ul>"},{"location":"import/","title":"DumpSync Command: Import","text":"<p>To restore a database dump, you can use the following command:</p> <pre><code>dumpsync import -f /path/to/dump.sql\n</code></pre>"},{"location":"import/#command-breakdown","title":"Command Breakdown","text":"<ul> <li> <p>dumpsync: This is the main command to invoke the DumpSync tool.</p> </li> <li> <p>import: This subcommand initiates the import process to restore the database from the specified dump file.</p> </li> </ul>"},{"location":"import/#options","title":"Options","text":"<ul> <li>-f /path/to/dump.sql: Specifies the path to the dump file that you want to restore. Replace <code>/path/to/dump.sql</code> with the actual file path to your SQL dump file.</li> </ul>"},{"location":"import/#example","title":"Example","text":"<p>To restore a database from a dump file located at <code>/backups/example_dump.sql</code>, you would run:</p> <pre><code>dumpsync import -f /backups/example_dump.sql\n</code></pre>"},{"location":"import/#notes","title":"Notes","text":"<ul> <li>Ensure that the dump file exists and that you have the necessary permissions to read it.</li> <li>The import process will overwrite existing data in the database, so be cautious when using this command, especially if restoring to a production environment.</li> <li>It\u2019s recommended to back up current data before performing an import to avoid accidental data loss.</li> </ul>"},{"location":"install/","title":"Installation","text":""},{"location":"install/#installing-rust-on-different-operating-systems","title":"Installing Rust on Different Operating Systems","text":""},{"location":"install/#1-linux-and-macos","title":"1. Linux and macOS","text":"<p>To install Rust on Linux and macOS, use the <code>rustup</code> script:</p> <ol> <li>Open your terminal.</li> <li>Run the following command:</li> </ol> <pre><code>curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n</code></pre> <ol> <li>Follow the on-screen instructions to complete the installation.</li> <li>After the installation, restart the terminal and verify it by running:</li> </ol> <pre><code>rustc --version\n</code></pre>"},{"location":"install/#2-windows","title":"2. Windows","text":"<p>To install Rust on Windows, follow these steps:</p> <ol> <li>Download the <code>rustup-init.exe</code> installer from the official website: https://rust-lang.org/tools/install.</li> <li>Run the installer and follow the setup instructions.</li> <li>After installation, open Command Prompt or PowerShell and verify Rust with:</li> </ol> <pre><code>rustc --version\n</code></pre> <p>Note: Rust will be added to your PATH automatically during installation.</p>"},{"location":"install/#installing-dumpsync-in-your-operational-system","title":"Installing DumpSync in your Operational System","text":"<p>Once Rust is installed, use this command to install DumpSync:</p> <pre><code>cargo install dumpsync\n</code></pre> <p>This will install DumpSync globally, allowing you to run it from any directory.</p>"},{"location":"settings/","title":"Settings File for DumpSync","text":"<p>The configuration file <code>dumpsync.yml</code> allows you to customize the options for the dump process. </p> <p>It should be saved as <code>dumpsync.yml</code> in the same directory where your project is running.</p>"},{"location":"settings/#file-structure","title":"File Structure","text":"<p>Example structure:</p> <pre><code>exports:\n  dump_data: true\n  compress_data: true\n  insert_ignore_into: false\n  drop_table_if_exists: true\n  database_if_not_exists: true\n\nconnection:\n  max_retries: 3\n  retry_connection_interval: 5\n</code></pre>"},{"location":"settings/#properties-of-exports","title":"Properties of <code>exports</code>","text":"<ul> <li>dump_data (<code>boolean</code>): Determines whether all data in your database should be exported. If set to <code>true</code>, the content of all tables will be included in the dump. If <code>false</code>, only the structures of the tables will be exported.</li> <li>compress_data (<code>boolean</code>): Specifies whether the dump should be compressed. If set to <code>true</code>, the dump will be compressed using the <code>gzip</code> algorithm, reducing the file size. If <code>false</code>, the dump will be saved as a plain SQL file.</li> <li>drop_table_if_exists (<code>boolean</code>): Specifies whether existing tables should be dropped before being recreated during the import process. Setting this to <code>true</code> will include a <code>DROP TABLE IF EXISTS</code> statement before the <code>CREATE TABLE</code> statement, preventing table duplication conflicts.</li> <li>insert_ignore_into (<code>boolean</code>): The <code>insert_ignore_into</code> property specifies whether data should be inserted using the <code>INSERT IGNORE INTO</code> statement during the import process. Setting it to <code>true</code> will ensure that duplicate records are ignored, preventing errors from duplicate entries in the table.</li> <li>database_if_not_exists (<code>boolean</code>): Indicates whether the database should be created only if it does not exist. If set to <code>true</code>, a <code>CREATE DATABASE IF NOT EXISTS</code> statement will be included in the dump, avoiding errors if the database is already present.</li> <li>ignore_tables (<code>array</code> of <code>strings</code>): A list of tables to be ignored during the dump. Tables listed here will not have their structure or data exported. Example:</li> </ul> <pre><code>ignore_tables:\n  - table\n</code></pre>"},{"location":"settings/#properties-of-connection","title":"Properties of <code>connection</code>","text":"<ul> <li>max_retries (<code>integer</code>): Defines the maximum number of retry attempts to establish a connection to the database. If a connection attempt fails, the application will retry up to this number.</li> <li>retry_connection_interval (<code>integer</code>): Specifies the interval (in seconds) to wait between each retry attempt when attempting to connect to the database. This allows for gradual retries rather than immediate retries.</li> </ul>"}]}